// <auto-generated />
using System;
using EurovalDataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CmsEuroval.Migrations
{
    [DbContext(typeof(EurovalCmsContext))]
    [Migration("20190103203114_DemoData")]
    partial class DemoData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EurovalDataAccess.Entities.CmsUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("ApiUser");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("EurovalDataAccess.Entities.Pista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Pistas");

                    b.HasData(
                        new { Id = 1, Nombre = "Padding" },
                        new { Id = 2, Nombre = "Football" },
                        new { Id = 3, Nombre = "Soccer" }
                    );
                });

            modelBuilder.Entity("EurovalDataAccess.Entities.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan>("Duracion");

                    b.Property<DateTime>("FechaReserva");

                    b.Property<int>("PistaId");

                    b.Property<int>("SocioId");

                    b.HasKey("Id");

                    b.HasIndex("PistaId");

                    b.HasIndex("SocioId");

                    b.ToTable("Reservas");

                    b.HasData(
                        new { Id = 1, Duracion = new TimeSpan(0, 2, 54, 0, 0), FechaReserva = new DateTime(2019, 1, 30, 21, 31, 13, 951, DateTimeKind.Local), PistaId = 1, SocioId = 1 },
                        new { Id = 2, Duracion = new TimeSpan(0, 3, 4, 0, 0), FechaReserva = new DateTime(2019, 7, 4, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 1, SocioId = 2 },
                        new { Id = 3, Duracion = new TimeSpan(0, 2, 19, 0, 0), FechaReserva = new DateTime(2019, 4, 24, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 1, SocioId = 3 },
                        new { Id = 4, Duracion = new TimeSpan(0, 2, 1, 0, 0), FechaReserva = new DateTime(2019, 2, 6, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 2, SocioId = 1 },
                        new { Id = 5, Duracion = new TimeSpan(0, 1, 6, 0, 0), FechaReserva = new DateTime(2019, 8, 27, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 2, SocioId = 2 },
                        new { Id = 6, Duracion = new TimeSpan(0, 2, 8, 0, 0), FechaReserva = new DateTime(2019, 2, 8, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 2, SocioId = 3 },
                        new { Id = 7, Duracion = new TimeSpan(0, 0, 10, 0, 0), FechaReserva = new DateTime(2019, 6, 26, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 3, SocioId = 1 },
                        new { Id = 8, Duracion = new TimeSpan(0, 3, 6, 0, 0), FechaReserva = new DateTime(2019, 3, 11, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 3, SocioId = 2 },
                        new { Id = 9, Duracion = new TimeSpan(0, 1, 40, 0, 0), FechaReserva = new DateTime(2019, 2, 10, 21, 31, 13, 954, DateTimeKind.Local), PistaId = 3, SocioId = 3 }
                    );
                });

            modelBuilder.Entity("EurovalDataAccess.Entities.Socio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Socios");

                    b.HasData(
                        new { Id = 1, Email = "micorreo@euroval.com", Nombre = "Jose" },
                        new { Id = 2, Email = "micorre2o@euroval.com", Nombre = "Juan" },
                        new { Id = 3, Email = "micorre3o@euroval.com", Nombre = "Miguel" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EurovalDataAccess.Entities.Reserva", b =>
                {
                    b.HasOne("EurovalDataAccess.Entities.Pista", "Pista")
                        .WithMany()
                        .HasForeignKey("PistaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurovalDataAccess.Entities.Socio", "Socio")
                        .WithMany()
                        .HasForeignKey("SocioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EurovalDataAccess.Entities.CmsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EurovalDataAccess.Entities.CmsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EurovalDataAccess.Entities.CmsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EurovalDataAccess.Entities.CmsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
